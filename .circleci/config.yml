version: 2.1

orbs:
  slack: circleci/slack@4.10.1

jobs:
  build_and_test:
    docker:
      - image: cypress/base:16.13.0
    resource_class: large
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Add npmrc
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            echo "scope=datacamp" >> .npmrc
            echo "@datacamp:registry=https://registry.npmjs.org/" >> .npmrc
            echo "scripts-prepend-node-path=true" >> .npmrc
      - restore_cache:
          name: Restore cache
          keys:
            - project-cache-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Install packages
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save cache
          key: project-cache-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - run:
          name: Build distribution
          command: yarn build
      - persist_to_workspace:
          root: '.'
          paths:
            - '*'
      - run:
          name: Lint codebase
          command: yarn lint:ci
      - run:
          name: Check code formatting
          command: yarn format:check
      - run:
          name: Lint commits
          command: yarn lint:commits
      - run:
          name: Run unit tests
          command: yarn test:unit:ci
      - run:
          name: Run e2e stories tests
          command: yarn test:stories:ci
  release:
    docker:
      - image: cimg/node:16.13.0
    steps:
      - checkout
      - attach_workspace:
          at: '.'
      - run:
          name: Add git credentials
          command: |
            git config --global user.email engineering+datacamp-circleci-user@datacamp.com
            git config --global user.name datacamp-circleci-user
      - run:
          name: Release npm package
          command: yarn release
      - persist_to_workspace:
          root: '.'
          paths:
            - '*'
      - run:
          name: Get package version
          command: echo export VERSION_TAG=$(eval node -p "require\(\'./package.json\'\).version") >> $BASH_ENV
      - slack/notify:
          event: pass
          channel: 'CHT1GJV0E'
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":tada: New version of Waffles has been released!",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Version: *$VERSION_TAG*\n\nWhen: *$(date +'%d/%m/%Y')*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Check Release Notes"
                      },
                      "url": "https://github.com/datacamp/waffles/releases/tag/v$VERSION_TAG",
                      "action_id": "link"
                    }
                  ]
                }
              ]
            }
  build_docs:
    docker:
      - image: cimg/node:16.13.0
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Build static docs website
          command: yarn doc:build
      - persist_to_workspace:
          root: '.'
          paths:
            - '*'
  deploy_docs:
    docker:
      - image: ${STAGING_ECR_URL}/docker-deploy
        aws_auth:
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
    environment:
      BUCKET: waffles-next
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Sync with S3
          command: |
            export AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
            aws s3 rm s3://${BUCKET}.new.datacamp.com/ --recursive
            aws s3 sync build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*.js" --exclude "*.svg" --exclude "*.png" --exclude "*.jpg" --exclude "*.woff" --exclude "*.woff2" --cache-control public,max-age=0,must-revalidate
            aws s3 sync build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*" --include "*.js" --cache-control public,max-age=31536000,immutable
            aws s3 sync build s3://${BUCKET}.new.datacamp.com/ --acl public-read --exclude "*" --include "*.svg" --include "*.png" --include "*.jpg" --include "*.woff" --include "*.woff2" --cache-control public,max-age=31536000,immutable,no-transform

workflows:
  version: 2
  build_test_release:
    jobs:
      - build_and_test:
          context: org-global
      - release:
          requires:
            - build_and_test
          context: org-global
          filters:
            branches:
              only:
                - master
      - build_docs:
          requires:
            - release
          context: org-global
          filters:
            branches:
              only:
                - master
      - deploy_docs:
          requires:
            - build_docs
          context: org-global
          filters:
            branches:
              only:
                - master
